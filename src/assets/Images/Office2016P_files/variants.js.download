if (!window.variantController) {

    window.variantController =
            {
              registry: [],
              customIdLookup: {},
              addToCartLinkLookup: {},
              addToCartButtonLookup: {},
              wishlistButtonLookup: {},
              addToCartButtonIds: [],
              massAddToCartButtonIds: [],
              addToCartLinkIds: [],
              registerVariants: function (itemId, customId, priceId, itemNrId, qtyDiscountsId, qtyDiscountPricesId, productStatusId, productTimeFrameId, variantGTINId, qtyTextboxId, useVariantInventory, qtyDiscountsAcrossVariants, addToCartButtonId, addToCartLinkId, selectedVariantsId, pkgVariantsId, childPriceId, bindQtyToParent, bindQtyCheckboxId, personalizationIdsId, personalizationStringsId, checkThisOnlyOnButtonClick, rewardPointsId, rewardPointsToPurchaseId, qtyInStockId, priceAreaId, salePriceId, salePriceAreaId, wasPriceId, wasPriceAreaId, wishlistButtonId, massAddToCartButtonId, useQtyOf1IfNoQty, retailPriceId, retailPriceAreaId, youSaveId, groupAddToCartButtonId, weightId, availabilityId) {
                  this.registry.push(new VariantAjaxManager(itemId, customId, priceId, itemNrId, qtyDiscountsId, qtyDiscountPricesId, productStatusId, productTimeFrameId, variantGTINId, qtyTextboxId, useVariantInventory, qtyDiscountsAcrossVariants, addToCartButtonId, addToCartLinkId, selectedVariantsId, pkgVariantsId, childPriceId, bindQtyToParent, bindQtyCheckboxId, personalizationIdsId, personalizationStringsId, rewardPointsId, rewardPointsToPurchaseId, qtyInStockId, priceAreaId, salePriceId, salePriceAreaId, wasPriceId, wasPriceAreaId, useQtyOf1IfNoQty, retailPriceId, retailPriceAreaId, youSaveId, weightId, availabilityId));

                this.customIdLookup[customId] = this.registry[this.registry.length - 1];
                this.bindAddToCartButton(addToCartButtonId, checkThisOnlyOnButtonClick);
                this.bindAddToCartLink(addToCartLinkId);
                this.bindWishListButton(wishlistButtonId);
                this.bindMassAddToCartButton(massAddToCartButtonId);
                this.bindAddToCartButton(groupAddToCartButtonId, checkThisOnlyOnButtonClick);

                if (addToCartLinkId != null && addToCartLinkId.length > 0)
                  this.addToCartLinkLookup[addToCartLinkId] = this.registry[this.registry.length - 1];

                if (checkThisOnlyOnButtonClick && addToCartButtonId != null && addToCartButtonId.length > 0)
                  this.addToCartButtonLookup[addToCartButtonId] = this.registry[this.registry.length - 1];

                if (wishlistButtonId != null && wishlistButtonId.length > 0)
                    this.wishlistButtonLookup[wishlistButtonId] = this.registry[this.registry.length - 1];

                if (checkThisOnlyOnButtonClick && groupAddToCartButtonId != null && groupAddToCartButtonId.length > 0)
                    this.addToCartButtonLookup[groupAddToCartButtonId] = this.registry[this.registry.length - 1];

              },
              bindAddToCartButton: function (addToCartButtonId, checkThisOnlyOnButtonClick) {

                if (addToCartButtonId != null && addToCartButtonId.length > 0) {

                  if ($.inArray(addToCartButtonId, this.addToCartButtonIds) != -1)
                    return;

                  this.addToCartButtonIds.push(addToCartButtonId);

                  $("#" + addToCartButtonId).click(function (event) {

                    var lastResult;

                    if (checkThisOnlyOnButtonClick) {

                      var controller = window.variantController.addToCartButtonLookup[addToCartButtonId];
                      //need to have some sort of way to look up the class based on id here?
                      lastResult = controller.checkSelections(false, true);

                      if (!lastResult.success) {
                        alert(lastResult.message);
                        event.preventDefault();
                        return false;
                      }

                      controller.saveSelections(controller.getSelections(true).join("|"));
                      controller.savePersonalizations(controller.getPersonalizations().join("|"));

                      return true;

                    }
                    else {

                      for (var i = 0; i < window.variantController.registry.length; i++) {

                        lastResult = window.variantController.registry[i].checkSelections(true, false);

                        if (!lastResult.success) {
                          alert(lastResult.message);
                          event.preventDefault();
                          return false;
                        }

                        window.variantController.registry[i].saveSelections(window.variantController.registry[i].getSelections(true).join("|"));
                        window.variantController.registry[i].savePersonalizations(window.variantController.registry[i].getPersonalizations().join("|"));
                      }
                    }

                    return true;
                  });
                }
              },
              bindMassAddToCartButton: function (massAddToCartButtonId) {
                if (massAddToCartButtonId != null && massAddToCartButtonId.length > 0) {

                  if ($.inArray(massAddToCartButtonId, this.massAddToCartButtonIds) != -1)
                    return;

                  this.massAddToCartButtonIds.push(massAddToCartButtonId);

                  $("#" + massAddToCartButtonId).click(function (event) {

                    var lastResult;

                    for (var i = 0; i < window.variantController.registry.length; i++) {

                      lastResult = window.variantController.registry[i].checkSelections(true, false);

                      if (!lastResult.success) {
                        alert(lastResult.message);
                        event.preventDefault();
                        return false;
                      }

                      window.variantController.registry[i].saveSelections(window.variantController.registry[i].getSelections(true).join("|"));
                      window.variantController.registry[i].savePersonalizations(window.variantController.registry[i].getPersonalizations().join("|"));
                    }
                   
                    return true;
                  });
                }
              },
              bindWishListButton: function (wishlistButtonId) {

                if (wishlistButtonId != null && wishlistButtonId.length > 0) {

                  $("#" + wishlistButtonId).click(function (event) {

                    var controller = window.variantController.wishlistButtonLookup[wishlistButtonId];
                                var lastResult = controller.checkSelections(false, true);

                    if (!lastResult.success) {
                      alert(lastResult.message);
                      event.preventDefault();
                      return false;
                    }

                    controller.saveSelections(controller.getSelections(true).join("|"));
                    controller.savePersonalizations(controller.getPersonalizations().join("|"));

                    return true;
                  });
                }
              },
              bindAddToCartLink: function (addToCartLinkId) {
                if (addToCartLinkId != null && addToCartLinkId.length > 0) {

                  if ($.inArray(addToCartLinkId, this.addToCartLinkIds) != -1)
                    return;

                  this.addToCartLinkIds.push(addToCartLinkId);

                  $("#" + addToCartLinkId).click(function (event) {

                    var lastResult;
                    var controller = window.variantController.addToCartLinkLookup[addToCartLinkId];

                    //need to have some sort of way to look up the class based on id here?
                    lastResult = controller.checkSelections(false, true);

                    if (!lastResult.success) {
                      alert(lastResult.message);
                      event.preventDefault();
                      return false;
                    }

                    if (!controller.uploadPersonalizationFiles()) {
                      event.preventDefault();
                      return false;
                    }

                    controller.setSelectionsOnLink($(this), controller.getSelections(false).join("|"));
                    controller.setPersonalizationsOnLink($(this), controller.getPersonalizations(false).join("|"));
                    return true;
                  });
                }
              }
            };
  }


var VariantAjaxManager = function (itemId, customId, priceId, itemNrId, qtyDiscountsId, qtyDiscountPricesId,
                                   productStatusId, productTimeFrameId, variantGTINId, qtyTextboxId, useVariantInventory,
                                   qtyDiscountsAcrossVariants, addToCartButtonId, addToCartLinkId, selectedVariantsId, pkgVariants,
                                   childPriceId, bindQtyToParent, bindQtyCheckboxId, personalizationIdsId, personalizationStringsId,
                                   rewardPointsId, rewardPointsToPurchaseId, qtyInStockId, priceAreaId, salePriceId, salePriceAreaId, wasPriceId, wasPriceAreaId,
                                   useQtyOf1IfNoQty, retailPriceId, retailPriceAreaId, youSaveId, weightId, availabilityId) {
  this._itemId = itemId;
  this._priceId = priceId;
  this._itemNrId = itemNrId;
  this._qtyDiscountsId = qtyDiscountsId;
  this._qtyDiscountPricesId = qtyDiscountPricesId;
  this._productStatusId = productStatusId;
  this._productTimeFrameId = productTimeFrameId;
  this._variantGTINId = variantGTINId;
  this._customId = customId;
  this._qtyTextboxId = qtyTextboxId;
  this._useVariantInventory = useVariantInventory;
  this._qtyDiscountsAcrossVariants = qtyDiscountsAcrossVariants;
  this._addToCartButtonId = addToCartButtonId;
  this._addToCartLinkId = addToCartLinkId;
  this._selectedVariantsId = selectedVariantsId;
  this._pkgVariants = pkgVariants;
  this._childPriceId = childPriceId;
  this._bindQtyToParent = bindQtyToParent;
  this._bindQtyCheckBoxId = bindQtyCheckboxId;
  this._personalizationIdsId = personalizationIdsId;
  this._personalizationStringsId = personalizationStringsId;
  this._rewardPointsId = rewardPointsId;
  this._rewardPointsToPurchaseId = rewardPointsToPurchaseId;
  this._qtyInStockId = qtyInStockId;
  this._priceAreaId = priceAreaId;
  this._salePriceId = salePriceId;
  this._salePriceAreaId = salePriceAreaId;
  this._wasPriceId = wasPriceId;
  this._wasPriceAreaId = wasPriceAreaId;
  this._useQtyOf1IfNoQty = useQtyOf1IfNoQty;
  this._retailPriceId = retailPriceId;
  this._retailPriceAreaId = retailPriceAreaId;
  this._youSaveId = youSaveId;
  this._weightId = weightId;
  this._availability = availabilityId;

  this.indexes = {};

  var self = this;

  $(function () {
    self.init();
  });
};

VariantAjaxManager.prototype = {
  init: function () {
    var self = this;

    var $dd = $(".variantDropDown" + this._customId + ", .variantRadioButtonList" + this._customId + ", .variantCheckBox" + this._customId);

    if (this._useVariantInventory) {
      this.$varInvDDs = $dd.not("[id*=NonInventoryVariantGroup" + this._customId + "]");

      if ($("#" + this._selectedVariantsId).val() !== undefined)
      {
        var ids = $("#" + this._selectedVariantsId).val().split("|");

        var lastVal;
        this.$varInvDDs.each(function (i) {
            self.indexes[this.id] = i;

            if (i < ids.length) {
                if ($(this).is("select")) {
                    $(this).val(ids[i]);
                }
                else {

                }
            }

            if (self._useVariantInventory && i > 0 && lastVal === "-999") {
                if ($(this).is("select")) {
                    $(this).attr("disabled", "disabled");

                }
                else {
                    $(this).find("input").attr("disabled", "disabled").first().attr("checked", "checked");
                }
            }

            if ($(this).is("select")) {
                lastVal = $(this).val();
            }
            else {
                if ($(this).find("input:checked").length > 0) {
                    lastVal = $(this).find("input:checked").val();
                }
                else {
                    lastVal = "-999";
                }
            }
        });
      }
      else {
          this.$varInvDDs.each(function (i) {
              self.indexes[this.id] = i;
          });          
      }
    }

    $dd.change(function () {
      self.onVariantChange($(this));
    });

    $(".variantRadioButtonList" + this._customId + " input").change(function () {
      self.onVariantChange($(this));
    });

    $(".variantCheckBox" + this._customId + " input").change(function () {
      self.onVariantChange($(this));
    });

    $(".personalizationTextbox" + this._customId).change(function () {
      self.onPersonalizationChange($(this));
    });

    $(".personalizationTextboxWithConfirm" + this._customId).change(function () {
      self.onPersonalizationChange($(this));
    });

    $(".PersonalizationFileUpload" + this._customId).change(function () {
      self.onPersonalizationChange($(this));
    });

    $('input[class*="NextStep' + this._customId + '"]').keyup(function (e) {
      self.enableSteps($(this), self._customId);
    });

    $('textarea[class*="NextStep' + this._customId + '"]').keyup(function (e) {
      self.enableSteps($(this), self._customId);
    });

    try {
        if (typeof this.$varInvDDs != 'undefined' && this.$varInvDDs) {
            this.$varInvDDs.first().change();
      }
    }
    catch (err) { }
  },

  ajaxCall: function (method, parameters, success) {
    $.ajax({
      type: "POST",
      contentType: "application/json; charset=utf-8",
      url: "/Store/Controls/ScriptService.asmx/" + method,
      dataType: "json",
      data: parameters,
      success: success
    });
  },

  onPersonalizationChange: function ($element) {
      $element.removeClass("needsSelection");
    this.updatePrice();
  },

  onVariantChange: function ($element) {
      if (this._useVariantInventory) {
          this.updateVariants($element);
      }
      else {
          this.updatePrice();
      }

      $element.removeClass("needsSelection");
  },

  enableSteps: function ($element, customId) {
    var arr = $element.attr('class').split(" ");

    if (arr.length >= 3) {

      //have to find step group, stepID and nextstep
      var stepGroupClass = "";
      var stepIdClass = "";
      var nextStepIdClass = "";
      for (var i = 0; i < arr.length; i++) {
        if (arr[i].indexOf("StepGroup") != -1)
          stepGroupClass = arr[i];
        else if (arr[i].indexOf("StepID") != -1)
          stepIdClass = arr[i];
        else if (arr[i].indexOf("NextStep") != -1)
          nextStepIdClass = arr[i];
      }

      if (stepIdClass != "" && nextStepIdClass != "") {
        var stepIDs = stepIdClass.split("_");
        var stepID = stepIDs[stepIDs.length - 1];
        var nextStepIDs = nextStepIdClass.split("_");
        var nextStepID = nextStepIDs[nextStepIDs.length - 1];
        var c = ".StepID" + customId + "_" + nextStepID;
        if ($element.val() == "") {
          $(c).attr("disabled", true);
          $(c).val("");
          $(c).trigger("keyup");
        }
        else {
          $(c).attr("disabled", false);
        }
      }
    }
  },

  setSelectionsOnLink: function (link, selections) {

    if (selections == '')
      return;

    var href = $(link).prop("href");

    //need to get selections from qty grid as well
    //needs to build a string to add multiple items to cart, one for each qty grid option that is specified, and the the options from the rest of the selections
    var qtyGrid = $(".VariantQuantityGrid" + this._customId);
    //if we have a qty grid, then for each that has qty, need to add that to the link
    //addtocart.aspx?itemid_1=blah&quantity_1=blah&variantid_1=1|2|3  need to get variant and qty of the individual qty grid column
    if (qtyGrid.length > 0) {
      //then we basically have to rebuild the link
      //get a list of all textboxes
      var $qtyTextboxes = qtyGrid.find(".VariantQuantityGridTextbox" + this._customId);

      var qs = "";

      for (var i = 0; i < $qtyTextboxes.length; i++) {
        var iQty = parseInt($($qtyTextboxes[i]).find(".VariantQuantityBox").val());
        var iVariantID = parseInt($($qtyTextboxes[i]).find("input[id$='hfVariantQuantityGridVariantID" + this._customId + "']").val());

        if (iQty > 0) {

          var sVariants = iVariantID;
          if (selections.length > 0)
            sVariants += "|" + selections;

          if (qs.length > 0)
            qs += "&";
          qs += "itemID_" + i + "=" + this._itemId + "&quantity_" + i + "=" + iQty + "&variantID_" + i + "=" + sVariants;
        }
      }

      href = "/store/AddToCart.aspx?" + qs;
    }
    else {
      href += "&variantID=" + selections;
    }

    $(link).prop("href", href);
  },

  setPersonalizationsOnLink: function (link, selections) {

    if (selections == '')
      return;

    var href = $(link).prop("href");
    href += "&personalization=" + selections;
    href += "&personalizationids=" + $("#" + this._personalizationIdsId).val();

    $(link).prop("href", href);
  },

  uploadPersonalizationFiles: function () {

    var self = this;
    $(".PersonalizationFileUpload" + this._customId).each(function (index, element) {
      if ($(element).val() != '') {

        var fileData = $(element).prop("files")[0];
        var formData = new window.FormData();
        formData.append("file", fileData);

        var temp = $.ajax({
          type: "POST",
          url: "/Store/UploadFile.ashx",
          data: formData,
          dataType: "text",
          cache: false,
          contentType: false,
          processData: false,
          async: false
        }).responseText;

        if (temp) {
          result = JSON.parse(temp);

          if (result) {

            if (result.indexOf("Error") != -1) {
              alert(result);
              return false;
            }
            else {
              $(element).attr('data-url', result);
              return true;
            }

          }
          else {
            alert("Failed to connect to server to upload file.");
            return false;
          }
        }
        else {
          alert("Failed to connect to server to upload file.");
          return false;
        }
      }
    });

    return true;
  },

  saveSelections: function (selections) {
    $("#" + this._selectedVariantsId).val(selections);
  },

  savePersonalizations: function (selections) {
    $("#" + this._personalizationStringsId).val(selections);
  },

  checkSelections: function (bForceValidQty, bLinkClicked) {
    var selected = true;

    var result = {
      success: true,
      message: ""
    };

    //need to have ability to only check for ones that have a quantity
    var qtyGrid = $(".VariantQuantityGrid" + this._customId);

    if (bForceValidQty && this.qtyIsEmpty() && qtyGrid.length == 0) {
      return result;
    }
    else if (qtyGrid.length > 0 && bLinkClicked) {
      //verify we have a valid quantity in the grid before we try to add
      //but only when adding via the link, b/c the button will just ignore if 0 qtys
      var $qtyTextboxes = qtyGrid.find(".VariantQuantityGridTextbox" + this._customId);
      var qtyGridHasQty = false;
      for (var i = 0; i < $qtyTextboxes.length; i++) {
        var iQty = parseInt($($qtyTextboxes[i]).find(".VariantQuantityBox").val());

        if (iQty > 0) {

          qtyGridHasQty = true;
        }
      }
      selected = qtyGridHasQty;
      if (!selected) {
          result.message = "A quantity wasn't entered";
      };
    }

    var sStoreTextVariantMessage = $("input[id$='hfAlertMsg_Variant']").val();

    $(".variantDropDown" + this._customId).each(function (index, element) {
      var $dd = $(element);

      if ($dd.val() === "-999") {
        $dd.addClass("needsSelection");
        selected = false;
        result.message = sStoreTextVariantMessage;
        if (result.message.length <= 0) {
          result.message = "Please select the product options for this item in the lists below, there is at least 1 selection missing.\n\n";
        }
      } else {
        $dd.removeClass("needsSelection");
      }
    });


    var $rb = $(".variantRadioButtonList" + this._customId);

    var $rbChecked = $(".variantRadioButtonList" + this._customId + " input:radio:checked");

    if ($rb.length > 0 && $rbChecked.length != $rb.length) {
      selected = false;
      result.message = sStoreTextVariantMessage;
      if (result.message.length <= 0) {
        result.message = "Please select the product options for this item in the lists below, there is at least 1 selection missing.\n\n";
      }
    }
    else {
      $(".variantRadioButtonList" + this._customId + " input:radio:checked").each(function () {
        var $radio = $(this);

        if ($radio.val() === "-999") {
          $radio.closest(".variantRadioButtonList" + this._customId).addClass("needsSelection");
          selected = false;
          result.message = sStoreTextVariantMessage;
          if (result.message.length <= 0) {
            result.message = "Please select the product options for this item in the lists below, there is at least 1 selection missing.\n\n";
          }
        }
      });
    }

    var personalizeMessage = $("input[id$='hfAlertMsg_Personalize']").val();
    var hasPersonalizeError = false;

    $(".personalizationTextbox" + this._customId + ".ProductPersonalizationRequired").each(function (index, element) {
      if ($(element).val() == '') {
        $(element).addClass("needsSelection");
        selected = false;
        hasPersonalizeError = true;
        if (personalizeMessage.length <= 0) {
          personalizeMessage = "Please enter a personalization value for the required fields.";
        }
      } else {
        $(element).removeClass("needsSelection");
      }
    });

    $(".personalizationTextboxWithConfirm" + this._customId + ".ProductPersonalizationRequired").each(function (index, element) {
      if ($(element).val() == '') {
        $(element).addClass("needsSelection");
        selected = false;
        hasPersonalizeError = true;
        if (personalizeMessage.length <= 0) {
          personalizeMessage = "Please enter a personalization value for the required fields.";
        }
      } else {
        $(element).removeClass("needsSelection");
      }
    });

    $(".PersonalizationFileUpload" + this._customId + ".ProductPersonalizationRequired").each(function (index, element) {
      if ($(element).val() == '') {
        selected = false;
        hasPersonalizeError = true;
        $(element).addClass("needsSelection");
        if (personalizeMessage.length <= 0) {
          personalizeMessage = "Please enter a personalization value for the required fields.";
        }
      }
      else {
        $(element).removeClass("needsSelection");
      }
    });

    var customId = this._customId;

    $(".personalizationTextboxWithConfirm" + this._customId).each(function (index, element) {
      var value = $(element).val();
      var $confirmBox = $("[id$='" + $(element).attr("data-confirmid") + "']");
      if (value != '' && $confirmBox.length > 0) {
        var confirmValue = $($confirmBox).val();
        if (confirmValue != value) {
          selected = false;
          hasPersonalizeError = true;
          personalizeMessage = personalizeMessage + "\n\nThe personalization values entered do not match. Please enter matching values.";
          $confirmBox.addClass("needsSelection");
        }
        else {
          $confirmBox.removeClass("needsSelection");
        }
      }
    });

    if (!selected) {
      result.success = false;
      if (hasPersonalizeError)
        result.message = result.message + "\n\n" + personalizeMessage;
    }

    return result;
  },

  getSelections: function (bForceValidQty) {
    var options = [];

    //need to have ability to only check for ones that have a quantity
    if (bForceValidQty && this.qtyIsEmpty()) {
      return options;
    }

    // dropdowns
    $(".variantDropDown" + this._customId).each(function () {
      options.push($(this).val());
    });

    // radio buttons
    $(".variantRadioButtonList" + this._customId + " input:radio:checked").each(function () {
      options.push($(this).val());
    });

    // checkboxes
    $(".variantCheckBox" + this._customId + " input:checkbox:checked").each(function () {
      options.push($(this).parent().attr("id"));
    });
    
    return options;
  },

  getPersonalizations: function () {

    var options = [];

    //order is important here, must get them in the same order they are on the page
    $(".personalization" + this._customId).each(function () {
      if (typeof $(this).attr('data-url') != 'undefined' && $(this).attr('data-url') != '') {
        options.push($(this).attr('data-url'));
      }
      else {
        options.push($(this).val());
      }
    });
    return options;
  },

  qtyIsEmpty: function () {

    if (this._bindQtyToParent) {
      if (this._bindQtyCheckBoxId.length > 0 && $("#" + this._bindQtyCheckBoxId + ":checked").length > 0) {
        return false;
      }
      else
        return true;
    }

    var quantity = $("#" + this._qtyTextboxId).val();

    if (!quantity) {
      var combinedQty = 0;

      if (this._qtyDiscountsAcrossVariants) {
        $(".VariantQuantityGridTextbox" + this._customId + " input").each(function () {
          var qty = parseInt($(this).val());
          if (!isNaN(qty)) {
            combinedQty = combinedQty + qty;
          }
        });
      }

      quantity = combinedQty;
    }

    if (quantity <= 0) {
      if (!this._useQtyOf1IfNoQty)
        return true;
    }

    return false;

  },

  getQuantity: function () {
    var quantity = $("#" + this._qtyTextboxId).val();

    if (!quantity) {
      var combinedQty = 0;

      if (this._qtyDiscountsAcrossVariants) {
        $(".VariantQuantityGridTextbox" + this._customId + " input").each(function () {
          var qty = parseInt($(this).val());
          if (!isNaN(qty)) {
            combinedQty = combinedQty + qty;
          }
        });
      }

      if ($("#hfQtyDiscountAcrossVariants").val() === "True") {
        $(".ProductDetailsVariantMatrixQuantityBox input").each(function () {
          var qty = parseInt($(this).val());
          if (!isNaN(qty)) {
            combinedQty = combinedQty + qty;
          }
        });
      }

      quantity = combinedQty;
    }

    if (quantity <= 0) {
      quantity = 1;
    }

    return quantity;
  },

  htmlEscape: function(str) {
    return String(str)
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
  },

  getUpdatedImgUrl: function (url,newPath) {
      var oldUrl = url.split('?')
      var newUrl = newPath;
      if (newPath.startsWith("/") && oldUrl.length>1) {
          newUrl = "/resize" + newPath;
      }
      if (oldUrl.length > 1)
          newUrl = newUrl + "?" + oldUrl[1];
      return newUrl;
  },

  updatePrice: function () {
    var itemID = this._itemId;
    var quantity = this.getQuantity();

    var options = this.getSelections();
    this.saveSelections(options.join("|"));
    var sOptions = options.join(", ");

    if (this._pkgVariants && this._pkgVariants.length > 0) {
      if (sOptions.length > 0)
        sOptions += ", ";
      sOptions += this._pkgVariants;
    }
    var personalizations = this.getPersonalizations();
    var sPersonalizations = '';
    $(personalizations).each(function (index, element) {
      if (sPersonalizations != '')
        sPersonalizations += ",";
      sPersonalizations += JSON.stringify(element);
    });

    var personalizationIds = $("#" + this._personalizationIdsId).val();
    if (typeof personalizationIds != 'undefined' && personalizationIds.length > 0)
      personalizationIds = personalizationIds.replace(/\|/g, ', ');
    else
      personalizationIds = '';

    var params = '{"itemID": ' + itemID + ', "quantity": ' + quantity + ', "variantIDs": [' + sOptions + '], "personalizationIds": [' + personalizationIds + '], "personalizationStrings": [' + sPersonalizations + ']}';

    var self = this;

    this.ajaxCall("GetPrice", params, function (result) {

      var resultPreSalePrice = Number(result.d.preSalePrice.replace(/[^0-9\.-]+/g, ""));
      var resultPrice = Number(result.d.price.replace(/[^0-9\.-]+/g, ""));
      
      if (self._qtyDiscountPricesId) {
        $("#" + self._qtyDiscountPricesId).html(result.d.qtyBreakPrices);
      }
      else if (resultPreSalePrice > resultPrice && $('#' + self._salePriceId).length > 0) {

        if (self._childPriceId) {
          $("#" + self._priceId).find("#" + self._childPriceId).html('');
          $("#" + self._priceId).find("#" + self._childPriceId).hide();
          $("#" + self._priceAreaId).hide();
        }
        else {
          $("#" + self._priceId).html('');
          $("#" + self._priceAreaId).hide();
        }

        if ($('#' + self._wasPriceId).length > 0) {
          $('#' + self._wasPriceId).html(result.d.preSalePrice);
          $('#' + self._wasPriceAreaId).show();
        }

        if ($('#' + self._salePriceId).length > 0) {
          $('#' + self._salePriceId).html(result.d.price);
          $('#' + self._salePriceAreaId).show();
        }
      }
      else {

        if ($('#' + self._wasPriceId).length > 0) {
          $('#' + self._wasPriceId).html('');
          $('#' + self._wasPriceAreaId).hide();
        }
        if ($('#' + self._salePriceId).length > 0) {
          $('#' + self._salePriceId).html('');
          $('#' + self._salePriceAreaId).hide();
        }

        $("#" + self._priceAreaId).show();

        if (self._childPriceId) {
          $("#" + self._priceId).find("#" + self._childPriceId).html(result.d.price);
        }
        else {
          $("#" + self._priceId).html(result.d.price);

        }
      }


      $("#" + self._itemNrId).html(self.htmlEscape(result.d.itemNr));
      $("#" + self._qtyDiscountsId).html(result.d.qtyPricing);
      $("#" + self._productStatusId).html(result.d.status);
      $("#" + self._productTimeFrameId).html(result.d.timeFrame);
      $("#" + self._variantGTINId).html(result.d.gtin);
      $("#" + self._qtyInStockId).html(result.d.inStockQty);
      $("#" + self._rewardPointsId).html(result.d.rewardPointsEarned);
      $("#" + self._rewardPointsToPurchaseId).html(result.d.rewardPointsToPurchase);
      $('#' + self._retailPriceId).html(result.d.retailPrice);
      $("#" + self._youSaveId).html(result.d.youSave);
      $("#" + self._weightId).html(result.d.weight);
      $("#" + self._availabilityId).html(result.d.availability);
      
      if (sOptions.length > 0) {
          var estimateLink = $("a.estimate-shipping");
          if (estimateLink.length != 0) {
              var estimateUrl = estimateLink.attr("href").replace(/(\?|&)variantIds=[^&]*/, "");
              estimateLink.attr("href", estimateUrl + ((estimateUrl.indexOf("?") >= 0) ? "&" : "?") + "variantIds=" + sOptions);
          }

          var notifymelink = $("#lnkNotifyMe");
          if (notifymelink != null) {
              if (result.d.ShowNotifyMe == 'TRUE') {
                  var notifyurl = notifymelink.attr("data-href").replace(/(\?|&)variantIds=[^&]*/, "");
                  if (notifyurl != "")
                      notifymelink.data("href", notifyurl + ((notifyurl.indexOf("?") >= 0) ? "&" : "?") + "variantIds=" + sOptions);
                  notifymelink.show();
              }
              else {
                  notifymelink.hide();
              }
          }

          if (result.d.ShowAddToCart == 'TRUE')
              $("#" + self._addToCartButtonId).show();
          else
              $("#" + self._addToCartButtonId).hide();

          if (result.d.variantInventoryImg != '') {
              var mainimg = document.getElementById("PhotoThumbnails_imgPhoto");
              if (mainimg != null && mainimg.src != undefined && !mainimg.src.includes(result.d.variantInventoryImg)) {
                  mainimg.src = self.getUpdatedImgUrl(mainimg.src, result.d.variantInventoryImg);

                  var mainimgHref = document.getElementsByClassName("main-product-photo");
                  if (mainimgHref != null && mainimgHref[0].href != undefined) {
                      mainimgHref[0].href = self.getUpdatedImgUrl(mainimgHref[0].href, result.d.variantInventoryImg);
                  }
                  var mainimgzoom = document.getElementsByClassName("zoomImg");
                  if (mainimgzoom != null && mainimgzoom[0].src != undefined) {
                      mainimgzoom[0].src = self.getUpdatedImgUrl(mainimgzoom[0].src, result.d.variantInventoryImg);
                  }
              }
          }         
      }

    });
  },

  updateVariants: function ($element) {
    var options = [];

    var elementID = $element.get(0).id;

    if (this.indexes[elementID] === null) {
      this.updatePrice();
      return;
    }

    var nextIndex = this.indexes[elementID] + 1;

    var $sel = this.$varInvDDs.slice(0, nextIndex);

    $sel.each(function () {
      if ($(this).is("select")) {
        options.push($(this).val());
      }
      else {
        options.push($(this).find("input:checked").val());
      }
    });

    var groupID = $("#variantGroupID" + this._customId + "_" + (nextIndex)).val();

    if (typeof groupID === 'undefined') {
        this.updatePrice();
        return;
    }
    var $next = $(this.$varInvDDs.get(nextIndex));

    if ($next.length == 0) {
      this.updatePrice();
      return;
    }

    if ($element.val() === "-999" || (!$element.is("select") && $element.find("input:checked").length == 0)) {
        this.setDefaults($element);
        this.updatePrice();
      return;
    }

    var qty = this.getQuantity();

    var itemID = this._itemId;

    if (itemID == null || isNaN(itemID))
      itemID = 0;

    if ($next.is("select")) {
      $next.removeAttr("disabled");
    }
        
    var params = '{"variantIDs": [' + options.join(', ') + '], "groupID": ' + groupID + ', "qty": ' + qty + ', "itemID":' + itemID + '}';

    var self = this;

    this.ajaxCall("GetApplicableVariants", params, function (result) {
      var variants = $.parseJSON(result.d);

      var $selected;

      if ($next.is("select")) {
          var previousVal = $next.val();
        $next.children("option[value!='-999']").each(function () {
            // ZB 1-28-2015: Disable swatches for variants that aren't compatible with the currently selected parent variant
            var variantId = $(this).attr('value');
            $("img[id^='varswatch_" + groupID + "_" + variantId + "_']").addClass("SwatchNotApplicable");
            $(this).remove();
        });

        $.each(variants, function (key, value) {
            //add applied variants in sort order. the leading space is to stop json resort variants by key value
            var variantId = key.trim();
            $next.append($("<option>", { value: variantId }).text(value));
            $("img[id^='varswatch_" + groupID + "_" + variantId + "_']").removeClass("SwatchNotApplicable");
            
        });
        
        //keep previous selection selected if it is still available
        $next.children("option[value!='-999']").each(function () {
            if (previousVal == $(this).attr('value'))
                $(this).attr('selected', true);
        });

        $selected = $next;
      }
      else {
        $selected = $next.find("input:checked");

        var lookup = {};

        $.each(variants, function (key, value) {
            lookup[key.trim()] = value;
        });
        $next.find("input").each(function () {
          $(this).removeAttr("checked");
          if (this.value !== "-999" && !lookup[this.value]) {
            $(this).attr("disabled", "disabled");
          }
          else {
            $(this).removeAttr("disabled");
          }
        });
      }

      self.setDefaults($next);

      if ($selected.val() !== "-999") {
          //upate next available variant if pre selected a value
          self.updateVariants($next)
      }
      else
          self.updatePrice();
    });
  },

  setDefaults: function ($startElement) {
      var selectedVal;

    if ($startElement.is("select")) {
      selectedVal = $startElement.val();
    }
    else {
      var $checked = $startElement.find("input:checked");

      if ($checked.length > 0) {
        selectedVal = $checked.val();
      }
      else {
        selectedVal = "-999";
      }
    }

    if (selectedVal === "-999") {
      var $nextElements = this.$varInvDDs.slice(this.indexes[$startElement.get(0).id] + 1);
      $nextElements.each(function () {
        if ($(this).is("select")) {
          $(this).val("-999").attr("disabled", "disabled");
        }
        else {
          $(this).find("input").each(function () {
            $(this).removeAttr("checked");
            if (this.value === "-999") {
              $(this).attr("checked", "checked");
            }
            else {
              $(this).attr("disabled", "disabled");
            }
          });
        }
      });
    }
  }
};